package telegram

import (
	"database/sql"
	"fmt"
	"log"
	"log/slog"
	"net/mail"
	"os"
	"regexp"
	"strconv"

	"github.com/Corray333/internship_app/internal/notion"
	"github.com/Corray333/internship_app/internal/types"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (tg *TelegramClient) sendWelcomeMessage(chatID int64) {
	_, err := tg.store.GetUserByID(chatID)
	if err != nil {
		if err == sql.ErrNoRows {
			button := tgbotapi.NewKeyboardButtonContact("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
			keyboard := tgbotapi.NewReplyKeyboard([]tgbotapi.KeyboardButton{button})
			msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ Incetro.\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É, –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–ºü§ô")
			msg.ReplyMarkup = keyboard
			if _, err := tg.bot.Send(msg); err != nil {
				tg.HandleError("error while sending message: "+err.Error(), "chat_id", chatID)
				return
			}
			return
		}
		tg.HandleError("error while getting user from db: "+err.Error(), "chat_id", chatID)
		return
	}
	msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—åüò•")
	if _, err := tg.bot.Send(msg); err != nil {
		tg.HandleError("error while sending message: "+err.Error(), "chat_id", chatID)
		return
	}

}

func (tg *TelegramClient) handleInputFIO(user *types.User, update tgbotapi.Update) {
	re := regexp.MustCompile(`^([A-Za-z–ê-–Ø–∞-—è–Å—ë]+[ \t]*)+$`)
	if !re.MatchString(update.Message.Text) {
		var msg tgbotapi.Chattable
		switch user.Fails {
		case 0:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é)")
		case 1:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–ü—Ä–æ—à—É—É—É, –≤–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—éüôÑ")
		case 2:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–ù—É —Ç–µ–±–µ —á—Ç–æ, —Å–ª–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é?üí©")
		case 3:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–î–∞–≤–∞–π, —è –≤–µ—Ä—é –≤ —Ç–µ–±—è! –¢–æ–ª—å–∫–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è! üí™")
		case 4:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–°–µ—Ä—å—ë–∑–Ω–æ? –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üôÉ")
		case 5:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–ù—É—É—É—É, —Ç—ã –º–æ–∂–µ—à—å! –ü—Ä–æ—Å—Ç–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è! üò§")
		case 6:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–¢—ã —Ç–æ—á–Ω–æ —É–º–µ–µ—à—å —á–∏—Ç–∞—Ç—å, –¥–∞? –ò–º—è. –§–∞–º–∏–ª–∏—è. üßê")
		case 7:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–ê –º–æ–∂–µ—Ç, —Ç–µ–±–µ –ø–æ–º–æ—á—å? –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è, –¥–∞–≤–∞–π! üòÖ")
		case 8:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–õ–∞–¥–Ω–æ, —ç—Ç–æ —É–∂–µ –Ω–µ —Å–º–µ—à–Ω–æ. –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è, –æ–∫? üòë")
		case 9:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä—è—é - –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è!üò°")
		default:
			anim := tgbotapi.NewAnimation(update.FromChat().ID, tgbotapi.FileURL("https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExNnBqcXV2eDYxeG9xcjgweDh1dms5dnExdjIzbndpYTdzZzY5MHlwaiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/xT1R9Y1cmnniQDyL5K/giphy.gif"))
			anim.Caption = "–û–π, –≤—Å—ë, –Ω–∞—à–∏ –∏–Ω–¥—É—Å—ã —É—Å—Ç–∞–ª–∏ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–≤–æ–∏ –∫–æ—Å—è–∫–∏, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—éüò´"
			msg = anim
		}
		if _, err := tg.bot.Send(msg); err != nil {
			tg.HandleError("error while sending message: "+err.Error(), "chat_id", update.FromChat().ID)
			return
		}
		user.Fails++
		return
	}
	user.FIO = update.Message.Text
	user.State = StateWaitingEmail
	user.Fails = 0

	msg := tgbotapi.NewMessage(update.FromChat().ID, "–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ üåù –æ—Ç–ø—Ä–∞–≤–∏—à—å —Å–≤–æ—é —Ä–∞–±–æ—á—É—é / –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –ø–æ—á—Ç—É?)")
	if _, err := tg.bot.Send(msg); err != nil {
		tg.HandleError("error while sending message: "+err.Error(), "chat_id", update.FromChat().ID)
		return
	}

}

func (tg *TelegramClient) handleInputEmail(user *types.User, update tgbotapi.Update) {
	if _, err := mail.ParseAddress(update.Message.Text); err != nil {
		var msg tgbotapi.Chattable
		switch user.Fails {
		case 0:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–í–≤–µ–¥–∏ –Ω–∞—Å—Ç–æ—è—â—É—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É)")
		case 1:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–ù—É –≤–≤–µ–¥–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—Éü•∫")
		case 2:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞—Å—Ç–æ—è—â—É—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É! üìß")
		case 3:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–≠–π, –º–Ω–µ –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –Ω–∞—Å—Ç–æ—è—â–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞! üôÑ")
		case 4:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–î–∞–≤–∞–π, –±–µ–∑ —Ñ–æ–∫—É—Å–æ–≤. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üòÖ")
		case 5:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–¢—ã —Å–º–æ–∂–µ—à—å! –í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É! üí™")
		case 6:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–ù—É —ç—Ç–æ —É–∂–µ —Å–º–µ—à–Ω–æ. –ù–∞—Å—Ç–æ—è—â—É—é –ø–æ—á—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. üßê")
		case 7:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –≤ —Å—Ç—É–¥–∏—é! üé§")
		case 8:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–°–µ—Ä—å—ë–∑–Ω–æ, –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—á—Ç—ã –Ω–∏–∫–∞–∫. üôÉ")
		case 9:
			msg = tgbotapi.NewMessage(update.FromChat().ID, "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑! –í–≤–µ–¥–∏ —Å–≤–æ—é –Ω–∞—Å—Ç–æ—è—â—É—é –ø–æ—á—Ç—É! üò°")
		default:
			anim := tgbotapi.NewAnimation(update.FromChat().ID, tgbotapi.FileURL("https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExN3l1M2VnbWVqbjVxamVxMGc4dGMxempuMGh1bmYwM3VxdTQ3NXZleSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l4HnKwiJJaJQB04Zq/giphy.gif"))
			anim.Caption = "–°–æ—Ä—Ä–∏, —É –Ω–∞—à–µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–Ω—á–∏–ª–æ—Å—å –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è("
			msg = anim
		}
		if _, err := tg.bot.Send(msg); err != nil {
			tg.HandleError("error while sending message: "+err.Error(), "chat_id", update.FromChat().ID)
			return
		}
		user.Fails++
		return
	}
	user.Email = update.Message.Text
	user.State = StateWaitingDirection
	user.Fails = 0

	courses, err := notion.GetCourses()
	if err != nil {
		msg := tgbotapi.NewMessage(user.UserID, "–£–ø—Å, —É –Ω–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µüò¨")
		if _, err := tg.bot.Send(msg); err != nil {
			tg.HandleError("error while sending message: "+err.Error(), "chat_id", update.FromChat().ID)
			return
		}
		slog.Error("Error getting courses:" + err.Error())
		return
	}

	buttons := [][]tgbotapi.InlineKeyboardButton{}
	for _, course := range courses {
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData(course.ShortName, course.NotionID)})
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	msg := tgbotapi.NewMessage(update.FromChat().ID, "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:")
	msg.ReplyMarkup = keyboard
	if _, err := tg.bot.Send(msg); err != nil {
		tg.HandleError("error while sending message: "+err.Error(), "chat_id", update.FromChat().ID)
		return
	}
}

func (tg *TelegramClient) handleDirectionPick(user *types.User, update tgbotapi.Update) {
	callbackQuery := update.CallbackQuery

	selectedCourse := callbackQuery.Data

	if user.State != StateWaitingDirection {
		return
	}
	user.Course = &selectedCourse
	user.State = StateWaitingGroup

	callback := tgbotapi.NewCallback(callbackQuery.ID, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞")
	if _, err := tg.bot.Request(callback); err != nil {
		tg.HandleError("error sending callback: "+err.Error(), "update_id", update.UpdateID)
		return
	}

	deleteMsg := tgbotapi.NewDeleteMessage(update.CallbackQuery.Message.Chat.ID, update.CallbackQuery.Message.MessageID)
	if _, err := tg.bot.Request(deleteMsg); err != nil {
		tg.HandleError("error deleting message: "+err.Error(), "update_id", update.UpdateID)
		return
	}

	course, err := tg.store.GetCourse(*user.Course)
	if err != nil {
		slog.Error("Error getting course:" + err.Error())
		tg.HandleError("error getting course: "+err.Error(), "update_id", update.UpdateID)
		return
	}

	msg := tgbotapi.NewMessage(callbackQuery.From.ID, "–¢–µ–ø–µ—Ä—å –≤—Å—Ç—É–ø–∏ –≤ –≥—Ä—É–ø–ø—É —Ç–≤–æ–µ–≥–æ –∫—É—Ä—Å–∞, –≤ –Ω–µ–π —Ç—ã –Ω–∞–π–¥–µ—à—å –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç–∞–∂–µ—Ä–∞–º–∏.")
	keyboard := tgbotapi.NewInlineKeyboardMarkup([]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonURL("–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", course.Invite),
	}, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("–Ø –≤—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø—É", "joined_group"),
	})
	msg.ReplyMarkup = keyboard
	if _, err := tg.bot.Request(msg); err != nil {
		tg.HandleError("error sending message: "+err.Error(), "update_id", update.UpdateID)
		return
	}

}

func (tg *TelegramClient) groupJoined(user *types.User, update tgbotapi.Update) {
	callbackQuery := update.CallbackQuery
	fmt.Println()
	fmt.Printf("User check2: %+v\n", user)
	fmt.Println(*user.Course)
	fmt.Println()

	course, err := tg.store.GetCourse(*user.Course)

	if err != nil {
		tg.HandleError("error while getting course: "+err.Error(), "update_id", update.UpdateID)
		return
	}

	chatID := course.GroupID
	userID := callbackQuery.From.ID

	bot, err := tgbotapi.NewBotAPI(os.Getenv("BOT_TOKEN"))
	if err != nil {
		slog.Error(err.Error())
	}

	chatMember, err := bot.GetChatMember(tgbotapi.GetChatMemberConfig{
		ChatConfigWithUser: tgbotapi.ChatConfigWithUser{
			ChatID: chatID,
			UserID: userID,
		},
	})
	if err != nil {
		slog.Error(err.Error())
	}

	// Check the status of the user in the chat
	if chatMember.Status != "creator" && chatMember.Status != "administrator" && chatMember.Status != "member" {
		callback := tgbotapi.NewCallback(callbackQuery.ID, "–í—Å—Ç—É–ø–∏ –≤ –≥—Ä—É–ø–ø—É")
		if _, err := tg.bot.Request(callback); err != nil {
			tg.HandleError("error sending callback: "+err.Error(), "update_id", update.UpdateID)
			return
		}
		msg := tgbotapi.NewMessage(userID, "–í—Å—Ç—É–ø–∏ –≤ –≥—Ä—É–ø–ø—Éüòë")
		if _, err := tg.bot.Request(msg); err != nil {
			tg.HandleError("error sending message: "+err.Error(), "update_id", update.UpdateID)
			return
		}
		return
	}

	callback := tgbotapi.NewCallback(callbackQuery.ID, "–°–ø–∞—Å–∏–±–æ")
	if _, err := tg.bot.Request(callback); err != nil {
		tg.HandleError("error sending callback: "+err.Error(), "update_id", update.UpdateID)
		return
	}

	deleteMsg := tgbotapi.NewDeleteMessage(update.CallbackQuery.Message.Chat.ID, update.CallbackQuery.Message.MessageID)
	if _, err := tg.bot.Request(deleteMsg); err != nil {
		tg.HandleError("error deleting message: "+err.Error(), "update_id", update.UpdateID)
		return
	}

	msg := tgbotapi.NewMessage(callbackQuery.From.ID, "–°–ø–∞—Å–∏–±–æ, —Ç–≤–æ—è –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, —Å–∫–æ—Ä–æ –º—ã –≤—ã—à–ª–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏")
	if _, err := tg.bot.Request(msg); err != nil {
		tg.HandleError("error sending message: "+err.Error(), "update_id", update.UpdateID)
		return
	}

	tg.createUser(callbackQuery.Message.Chat.ID, user)
}

func (tg *TelegramClient) createUser(chat_id int64, user *types.User) {
	userID, err := notion.CreateUser(chat_id, user)
	if err != nil {
		msg := tgbotapi.NewMessage(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		if _, err := tg.bot.Request(msg); err != nil {
			tg.HandleError("error sending message: "+err.Error(), "user", user)
			return
		}
		log.Println("Error creating user:", err)
		return
	}
	user.ProfileID = &userID

	msg := tgbotapi.NewMessage(MARIA_CHAT_ID, fmt.Sprintf("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [%s](%s)", user.Username, "https://t.me/"+user.Username))
	button := tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω", strconv.Itoa(int(chat_id)))
	keyboard := tgbotapi.NewInlineKeyboardMarkup([]tgbotapi.InlineKeyboardButton{button})
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	if _, err := tg.bot.Request(msg); err != nil {
		tg.HandleError("error sending message: "+err.Error(), "user", user)
		return
	}

	msg = tgbotapi.NewMessage(ANDREW_CHAT_ID, fmt.Sprintf("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [%s](%s)", user.Username, "https://t.me/"+user.Username))
	msg.ParseMode = "Markdown"
	if _, err := tg.bot.Request(msg); err != nil {
		tg.HandleError("error sending message: "+err.Error(), "user", user)
		return
	}

}

func (tg *TelegramClient) handleContact(update tgbotapi.Update) {
	chatID := update.FromChat().ID
	user := extractUserInfo(update)
	avatar, _ := tg.getUserProfilePhoto(update)
	user.State = StateWaitingFIO
	user.Avatar = avatar

	if err := tg.store.CreateUser(&user); err != nil {
		tg.HandleError("error while creating user in db: "+err.Error(), "update_id", update.UpdateID)
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è)")
	removeKeyboard := tgbotapi.NewRemoveKeyboard(true)
	msg.ReplyMarkup = removeKeyboard
	if _, err := tg.bot.Request(msg); err != nil {
		tg.HandleError("error sending message: "+err.Error(), "update_id", update.UpdateID)
		return
	}

}

func (tg *TelegramClient) getUserProfilePhoto(update tgbotapi.Update) (string, error) {
	photos, err := tg.bot.GetUserProfilePhotos(tgbotapi.UserProfilePhotosConfig{
		UserID: update.FromChat().ID,
		Limit:  1,
	})
	if err != nil || photos.TotalCount == 0 {
		return "", fmt.Errorf("error getting user profile photos: %v", err)
	}

	fileID := photos.Photos[0][0].FileID
	file, err := tg.bot.GetFile(tgbotapi.FileConfig{FileID: fileID})
	if err != nil {
		return "", fmt.Errorf("error getting file info: %v", err)
	}
	return fmt.Sprintf("https://api.telegram.org/file/bot%s/%s", os.Getenv("BOT_TOKEN"), file.FilePath), nil

}

func extractUserInfo(update tgbotapi.Update) types.User {
	return types.User{
		Phone:    update.Message.Contact.PhoneNumber,
		Username: update.FromChat().UserName,
		UserID:   update.FromChat().ID,
	}
}

func (tg *TelegramClient) userAccepted(update tgbotapi.Update) {
	callbackQuery := update.CallbackQuery
	chatID, _ := strconv.Atoi(callbackQuery.Data)

	user, err := tg.store.GetUserByID(int64(chatID))
	if err != nil {
		msg := tgbotapi.NewMessage(callbackQuery.From.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		if _, err := tg.bot.Request(msg); err != nil {
			tg.HandleError("error sending message: "+err.Error(), "update_id", update.UpdateID)
			return
		}
		tg.HandleError("–æ—à–∏–∫–±–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "+err.Error(), "update_id", update.UpdateID)
		return
	}

	if err := tg.store.VerifyUser(int64(chatID)); err != nil {
		msg := tgbotapi.NewMessage(callbackQuery.From.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		if _, err := tg.bot.Request(msg); err != nil {
			tg.HandleError("error sending message: "+err.Error(), "update_id", update.UpdateID)
			return
		}
		tg.HandleError("–æ—à–∏–∫–±–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "+err.Error(), "update_id", update.UpdateID)
		return
	}
	callback := tgbotapi.NewCallback(callbackQuery.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É")
	if _, err := tg.bot.Request(callback); err != nil {
		tg.HandleError("error sending message: "+err.Error(), "update_id", update.UpdateID)
		return
	}

	del := tgbotapi.NewDeleteMessage(callbackQuery.From.ID, callbackQuery.Message.MessageID)
	if _, err := tg.bot.Send(del); err != nil {
		tg.HandleError("error sending message: "+err.Error(), "update_id", update.UpdateID)
		return
	}

	// Send message to the user that their account has been verified
	msg := tgbotapi.NewMessage(int64(chatID), "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç—ã –ø—Ä–∏–Ω—è—Ç –Ω–∞ –æ–±—É—á–µ–Ω–∏–µü•≥ –ß—Ç–æ–±—ã –ø—Ä–µ—Å—Ç—É–ø–∏—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é, –ø–µ—Ä–µ–π–¥–∏ –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µüëá")
	loginButton := tgbotapi.NewInlineKeyboardButtonURL("–ù–∞—á–∞—Ç—åüî•", "https://t.me/incetro_management_bot/app")
	keyboard := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(loginButton))
	msg.ReplyMarkup = keyboard
	if _, err := tg.bot.Request(msg); err != nil {
		tg.HandleError("error sending message: "+err.Error(), "update_id", update.UpdateID)
		return
	}

	if err := tg.store.GiveTasks(int64(chatID), *user.Course); err != nil {
		tg.HandleError("error while giving tasks to user: "+err.Error(), "update_id", update.UpdateID)
	}

}

func (tg *TelegramClient) HandleError(err string, args ...any) {
	if len(args)%2 == 1 {
		args = args[:len(args)-1]
	}
	for i := 0; i < len(args); i += 2 {
		err += fmt.Sprintf("%v=%v", args[i], args[i+1])
	}
	slog.Error(err)

	msg := tgbotapi.NewMessage(MARK_CHAT_ID, err)
	if _, err := tg.bot.Send(msg); err != nil {
		slog.Error("error while handling error: "+err.Error(), "error", err)
	}
}
