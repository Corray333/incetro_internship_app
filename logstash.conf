input {
    file {
        path => "/usr/share/logstash/logs/*.log"
        start_position => "beginning"
        sincedb_path => "/dev/null"
        codec => multiline {
            pattern => "^\[\d{2}:\d{2}:\d{2}\.\d{3}\]"  # Логи начинаются с временной метки
            negate => true
            what => "previous"
        }
    }
}

filter {
    # Извлечение временной метки, уровня логирования и сообщения с JSON
    grok {
        match => {
            "message" => "\[%{TIME:timestamp}\] %{LOGLEVEL:log_level}: %{GREEDYDATA:message_body} \{(?<json_message>\{.*\})\}"
        }
        # Включите `overwrite` если хотите, чтобы `json_message` заменял `message_body`
        overwrite => ["message_body"]
    }

    # Попытка распарсить JSON из поля json_message
    json {
        source => "json_message"
        target => "data"
        add_tag => ["json_parsed"]
    }

    # Преобразование времени в @timestamp
    date {
        match => ["timestamp", "HH:mm:ss.SSS"]
        target => "@timestamp"
    }

    # Удаление поля json_message, если оно больше не нужно
    mutate {
        remove_field => ["json_message"]
    }
}

output {
    elasticsearch {
        hosts => ["http://elasticsearch:9200"]
        index => "goapp-logs-%{+YYYY.MM.dd}"
    }

    stdout {
        codec => rubydebug
    }
}
